service: notey-api
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'dev'}
  region: eu-west-2

functions:

  authorizer:
    handler: authorizer.handler
    environment:
      COGNITO_USERPOOL_ID: !Ref cognitoUserPool
      COGNITO_WEB_CLIENT_ID: !Ref cognitoUserPoolWebclient
    
  createNote:
    handler: handler.createNote
    environment:
      NOTES_TABLE_NAME: !Ref notedTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt notedTable.Arn
    events: 
      - http:
          path: /notes
          method: post
          authorizer: authorizer

  updateNote:
    handler: handler.updateNote 
    environment:
      NOTES_TABLE_NAME: !Ref notedTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt notedTable.Arn    
    events: 
      - http:
          path: /notes/{id}
          method: put
          authorizer: authorizer

  deleteNote:
    handler: handler.deleteNote
    environment:
      NOTES_TABLE_NAME: !Ref notedTable 
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: !GetAtt notedTable.Arn    
    events: 
      - http:
          path: /notes/{id}
          method: delete
          authorizer: authorizer          

  getAllNotes:
    handler: handler.getAllNotes
    environment:
      NOTES_TABLE_NAME: !Ref notedTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: !GetAtt notedTable.Arn  
    events: 
      - http:
          path: /notes
          method: get
          authorizer: 
            name: userpool_authorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt cognitoUserPool.Arn

# ${ssm:/notes/${self:provider.stage}/userPoolArn}

plugins:
  - serverless-iam-roles-per-function

resources:
  Resources:
    ${file(resources.yml)}


